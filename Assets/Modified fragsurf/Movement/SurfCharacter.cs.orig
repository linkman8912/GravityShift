using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.Rendering;

namespace Fragsurf.Movement
{
    /// <summary>
    /// Easily add a surfable character to the scene.
    /// 
    /// This version uses a trigger collider and custom collision checks.
    /// It does three things:
    ///   1. Pushes light objects (objects whose mass is ≤ player's weight and ≤ maxPushableMass) by applying an impulse.
    ///   2. For heavy objects (object.mass > player's weight), if the player overlaps them, a reaction force is computed and
    ///      ComputePenetration is used to resolve any penetration.
    ///   3. Uses a BoxCast to catch fast movement (prevent tunneling).
    /// 
    /// Additionally, for lighter objects we now also compute penetration correction so that the player cannot enter them.
    /// </summary>
    [AddComponentMenu("Fragsurf/Surf Character")]
    public class SurfCharacter : MonoBehaviour, ISurfControllable
    {

        public bool disableAirStrafe = false;

        public enum ColliderType
        {
            Capsule,
            Box
        }

        #region Fields

        [Header("Physics Settings")]
        public Vector3 colliderSize = new Vector3(1f, 2f, 1f);
        [HideInInspector] public ColliderType collisionType { get { return ColliderType.Box; } }
        public float weight = 75f;
        /// <summary>
        /// Base push force applied to objects (and used for reaction calculations).
        /// </summary>
        public float rigidbodyPushForce = 2f;
        /// <summary>
        /// Maximum allowed impulse force when pushing objects.
        /// </summary>
        public float maxPushImpulse = 10f;
        /// <summary>
        /// Objects with a mass greater than this value are not eligible for being pushed (for light–object interactions).
        /// </summary>
        public float maxPushableMass = 30f;

        [Header("View Settings")]
        public Transform viewTransform;
        public Transform playerRotationTransform;

        [Header("Crouching Setup")]
        public float crouchingHeightMultiplier = 0.5f;
        public float crouchingSpeed = 10f;
        private float defaultHeight;
        private bool allowCrouch = true;

        [Header("Features")]
        public bool crouchingEnabled = true;
        public bool slidingEnabled = false;
        public bool laddersEnabled = true;
        public bool supportAngledLadders = true;

        [Header("Step Offset (can be buggy, enable at your own risk)")]
        public bool useStepOffset = false;
        public float stepOffset = 0.35f;

        [Header("Movement Config")]
        public MovementConfig movementConfig;

        // The external push (reaction) velocity computed each frame from heavy contacts.
        private Vector3 _externalPushVelocity = Vector3.zero;

        // Private variables for internal logic.
        private GameObject _groundObject;
        private Vector3 _baseVelocity;
        private Collider _collider;
        private Vector3 _angles;
        private Vector3 _startPosition;
        private GameObject _colliderObject;
        private GameObject _cameraWaterCheckObject;
        private CameraWaterCheck _cameraWaterCheck;

        private MoveData _moveData = new MoveData();
        private SurfController _controller = new SurfController();

        private Rigidbody rb;

        private List<Collider> triggers = new List<Collider>();
        private int numberOfTriggers = 0;
        private bool underwater = false;
        private Vector3 prevPosition;

        #endregion

        #region Properties

        public MoveType moveType { get { return MoveType.Walk; } }
        public MovementConfig moveConfig { get { return movementConfig; } }
        public MoveData moveData { get { return _moveData; } }
        public new Collider collider { get { return _collider; } }
        public GameObject groundObject
        {
            get { return _groundObject; }
            set { _groundObject = value; }
        }
        public Vector3 baseVelocity { get { return _baseVelocity; } }
        public Vector3 forward { get { return viewTransform.forward; } }
        public Vector3 right { get { return viewTransform.right; } }
        public Vector3 up { get { return viewTransform.up; } }

        #endregion

        #region Unity Methods

        private void OnDrawGizmos()
        {
            Gizmos.color = Color.red;
            Gizmos.DrawWireCube(transform.position, colliderSize);
        }

        private void Awake()
        {
            _controller.playerTransform = playerRotationTransform;

            if (viewTransform != null)
            {
                _controller.camera = viewTransform;
                _controller.cameraYPos = viewTransform.localPosition.y;
            }
        }

        private void Start()
        {
            // Create a child GameObject to hold our collider.
            _colliderObject = new GameObject("PlayerCollider");
            _colliderObject.layer = gameObject.layer;
            _colliderObject.transform.SetParent(transform);
            _colliderObject.transform.localPosition = Vector3.zero;
            _colliderObject.transform.localRotation = Quaternion.identity;
            _colliderObject.transform.SetSiblingIndex(0);

            // Create a separate object for camera water checking.
            _cameraWaterCheckObject = new GameObject("Camera water check");
            _cameraWaterCheckObject.layer = gameObject.layer;
            _cameraWaterCheckObject.transform.position = viewTransform.position;
            SphereCollider waterCheckSphere = _cameraWaterCheckObject.AddComponent<SphereCollider>();
            waterCheckSphere.radius = 0.1f;
            waterCheckSphere.isTrigger = true;
            Rigidbody waterCheckRb = _cameraWaterCheckObject.AddComponent<Rigidbody>();
            waterCheckRb.useGravity = false;
            waterCheckRb.isKinematic = true;
            _cameraWaterCheck = _cameraWaterCheckObject.AddComponent<CameraWaterCheck>();

            prevPosition = transform.position;

            // Fallbacks in case transforms are not assigned.
            if (viewTransform == null)
                viewTransform = Camera.main.transform;

            if (playerRotationTransform == null && transform.childCount > 0)
                playerRotationTransform = transform.GetChild(0);

            // Remove any existing collider on this GameObject.
            Collider existingCollider = gameObject.GetComponent<Collider>();
            if (existingCollider != null)
                Destroy(existingCollider);

            // Ensure a Rigidbody exists (even though we’ll make it kinematic).
            rb = gameObject.GetComponent<Rigidbody>();
            if (rb == null)
                rb = gameObject.AddComponent<Rigidbody>();

            // We are not using built–in physics for collisions,
            // so make the Rigidbody kinematic.
            rb.isKinematic = true;
            rb.useGravity = false;
            rb.angularDrag = 0f;
            rb.drag = 0f;
            rb.mass = weight;

            // Create the collider on the child object.
            switch (collisionType)
            {
                case ColliderType.Box:
                    _collider = _colliderObject.AddComponent<BoxCollider>();
                    BoxCollider boxc = _collider as BoxCollider;
                    boxc.size = colliderSize;
                    defaultHeight = boxc.size.y;
                    break;
                case ColliderType.Capsule:
                    _collider = _colliderObject.AddComponent<CapsuleCollider>();
                    CapsuleCollider capc = _collider as CapsuleCollider;
                    capc.height = colliderSize.y;
                    capc.radius = colliderSize.x / 2f;
                    defaultHeight = capc.height;
                    break;
            }

            // Set the collider as a trigger so that Unity’s physics engine does not push objects automatically.
            _collider.isTrigger = true;

            // Set up movement data.
            _moveData.slopeLimit = movementConfig.slopeLimit;
            _moveData.rigidbodyPushForce = rigidbodyPushForce;
            _moveData.slidingEnabled = slidingEnabled;
            _moveData.laddersEnabled = laddersEnabled;
            _moveData.angledLaddersEnabled = supportAngledLadders;
            _moveData.playerTransform = transform;
            _moveData.viewTransform = viewTransform;
            _moveData.viewTransformDefaultLocalPos = viewTransform.localPosition;
            _moveData.defaultHeight = defaultHeight;
            _moveData.crouchingHeight = crouchingHeightMultiplier;
            _moveData.crouchingSpeed = crouchingSpeed;
            _moveData.origin = transform.position;
            _startPosition = transform.position;
            _moveData.useStepOffset = useStepOffset;
            _moveData.stepOffset = stepOffset;

            // Allow crouching if enabled.
            allowCrouch = crouchingEnabled;
        }

        private void Update()
        {
            // Keep the collider child from rotating.
            _colliderObject.transform.rotation = Quaternion.identity;

            // Update movement data (inputs, jump, crouch, etc.).
            UpdateMoveData();

            // Maintain positional consistency.
            Vector3 positionalMovement = transform.position - prevPosition;
            transform.position = prevPosition;
            _moveData.origin += positionalMovement;

            // Process trigger–based detections (e.g. water).
            if (numberOfTriggers != triggers.Count)
            {
                numberOfTriggers = triggers.Count;
                underwater = false;
                triggers.RemoveAll(item => item == null);
                foreach (Collider trigger in triggers)
                {
                    if (trigger == null)
                        continue;
                    if (trigger.GetComponentInParent<Water>())
                        underwater = true;
                }
            }

            _moveData.cameraUnderwater = _cameraWaterCheck.IsUnderwater();
            _cameraWaterCheckObject.transform.position = viewTransform.position;
            _moveData.underwater = underwater;

            if (allowCrouch)
                _controller.Crouch(this, movementConfig, Time.deltaTime);

            _controller.ProcessMovement(this, movementConfig, Time.deltaTime);

            // --- Apply Reaction (Push–Back) from Heavy Objects ---
            // _externalPushVelocity is computed in FixedUpdate (or adjusted via BoxCast)
            _moveData.origin += _externalPushVelocity * Time.deltaTime;
            // ---------------------------------------------------------

            // Apply our calculated movement.
            transform.position = _moveData.origin;
            prevPosition = transform.position;
            _colliderObject.transform.rotation = Quaternion.identity;
        }

        /// <summary>
        /// Custom FixedUpdate that:
        /// 1. Processes overlapping colliders:
        ///    - For light objects (mass ≤ player's weight and ≤ maxPushableMass), an impulse is applied
        ///      and a penetration correction is computed so the player does not enter them.
        ///    - For heavy objects (object.mass > player's weight), a reaction force is computed and
        ///      ComputePenetration is used to resolve any penetration.
        /// 2. Performs a BoxCast from the previous position to catch fast movement (prevent tunneling).
        /// </summary>
        private void FixedUpdate()
        {
            Vector3 boxCenter = _colliderObject.transform.position;
            Vector3 halfExtents = colliderSize * 0.5f;
            int layerMask = ~0; // Check all layers (adjust if needed).

            // --- Process Overlapping Colliders ---
            Collider[] overlaps = Physics.OverlapBox(boxCenter, halfExtents, Quaternion.identity, layerMask);

            Vector3 heavyReactionSum = Vector3.zero;
            int heavyCount = 0;
            Vector3 heavyCorrection = Vector3.zero;

            Vector3 lightCorrection = Vector3.zero;
            int lightCount = 0;

            foreach (Collider col in overlaps)
            {
                // Skip self and child colliders.
                if (col.gameObject == gameObject || col.transform.IsChildOf(transform))
                    continue;

                Rigidbody otherRb = col.attachedRigidbody;
                if (otherRb == null || otherRb.isKinematic)
                    continue;

                if (otherRb.mass <= weight && otherRb.mass <= maxPushableMass)
                {
                    // Push the lighter object.
                    Vector3 direction = (col.transform.position - transform.position).normalized;
                    float pushForceMagnitude = rigidbodyPushForce;
                    Vector3 force = direction * pushForceMagnitude;
                    force = Vector3.ClampMagnitude(force, maxPushImpulse);
                    otherRb.AddForce(force, ForceMode.Impulse);

                    // Compute penetration correction for lighter objects.
                    Vector3 penDir;
                    float penDist;
                    if (Physics.ComputePenetration(
                        _collider, _colliderObject.transform.position, _colliderObject.transform.rotation,
                        col, col.transform.position, col.transform.rotation,
                        out penDir, out penDist))
                    {
                        lightCorrection += penDir * penDist;
                        lightCount++;
                    }
                }
                else // For heavy objects (object.mass > player's weight)
                {
                    // Compute a reaction force based on the closest point.
                    Vector3 closestPoint = col.ClosestPoint(transform.position);
                    Vector3 reaction = (transform.position - closestPoint).normalized * rigidbodyPushForce;
                    heavyReactionSum += reaction;
                    heavyCount++;

                    // Compute penetration correction for heavy objects.
                    Vector3 penDir;
                    float penDist;
                    if (Physics.ComputePenetration(
                        _collider, _colliderObject.transform.position, _colliderObject.transform.rotation,
                        col, col.transform.position, col.transform.rotation,
                        out penDir, out penDist))
                    {
                        heavyCorrection += penDir * penDist;
                    }
                }
            }

            if (heavyCount > 0)
            {
                _externalPushVelocity = heavyReactionSum / heavyCount;
                // Immediately adjust the player's position to resolve penetration with heavy objects.
                _moveData.origin += heavyCorrection;
            }
            else
            {
                _externalPushVelocity = Vector3.zero;
            }

            if (lightCount > 0)
            {
                // Adjust the player's position to resolve penetration with lighter objects.
                _moveData.origin += lightCorrection / lightCount;
            }

            // --- Additional BoxCast to Prevent Tunneling ---
            Vector3 movement = _moveData.origin - prevPosition;
            float distance = movement.magnitude;
            if (distance > 0.001f)
            {
                Vector3 direction = movement.normalized;
                RaycastHit hit;
                if (Physics.BoxCast(prevPosition, halfExtents, direction, out hit, Quaternion.identity, distance, layerMask))
                {
                    Rigidbody hitRb = hit.collider.attachedRigidbody;
                    // If the hit object is heavy, process it.
                    if (hitRb != null && !hitRb.isKinematic && hitRb.mass > weight)
                    {
                        Vector3 tunnelDirection = (transform.position - hit.point).normalized;
                        Vector3 tunnelReaction = tunnelDirection * rigidbodyPushForce;
                        _externalPushVelocity += tunnelReaction / weight;

                        // Clamp the player's new position to just before the hit point.
                        _moveData.origin = hit.point - direction * 0.1f;
                    }
                }
            }
        }

        #endregion

        #region Input and Utility Methods

        private void UpdateMoveData()
        {
            // Old code for this
            // _moveData.verticalAxis = Input.GetAxisRaw("Vertical");
            // _moveData.horizontalAxis = Input.GetAxisRaw("Horizontal");

            // add a mechanism to stop the player from airstrafing
<<<<<<< HEAD

            if (disableAirStrafe)
            {
                // When air control is locked, ignore horizontal/vertical input.
                _moveData.verticalAxis = 0f;
                _moveData.horizontalAxis = 0f;
            }
            else
            {
                _moveData.verticalAxis = Input.GetAxisRaw("Vertical");
                _moveData.horizontalAxis = Input.GetAxisRaw("Horizontal");
            }

=======
            
            if(disableAirStrafe) {
              // When air control is locked, ignore horizontal/vertical input.
              _moveData.verticalAxis = 0f;
              _moveData.horizontalAxis = 0f;
            }
            else {
              _moveData.verticalAxis = Input.GetAxisRaw("Vertical");
              _moveData.horizontalAxis = Input.GetAxisRaw("Horizontal");
            }
            
>>>>>>> b26c61add81dff435f4e12398ae5bb71317b5cfe
            _moveData.sprinting = Input.GetButton("Sprint");

            if (Input.GetButtonDown("Crouch"))
                _moveData.crouching = true;
            if (!Input.GetButton("Crouch"))
                _moveData.crouching = false;

            bool moveLeft = _moveData.horizontalAxis < 0f;
            bool moveRight = _moveData.horizontalAxis > 0f;
            bool moveFwd = _moveData.verticalAxis > 0f;
            bool moveBack = _moveData.verticalAxis < 0f;

            _moveData.sideMove = moveLeft ? -movementConfig.acceleration :
                                   (moveRight ? movementConfig.acceleration : 0f);

            _moveData.forwardMove = moveFwd ? movementConfig.acceleration :
                                      (moveBack ? -movementConfig.acceleration : 0f);

            if (Input.GetButtonDown("Jump"))
                _moveData.wishJump = true;
            if (!Input.GetButton("Jump"))
                _moveData.wishJump = false;

            _moveData.viewAngles = _angles;
        }

        private void OnTriggerEnter(Collider other)
        {
            if (!triggers.Contains(other))
                triggers.Add(other);
        }

        private void OnTriggerExit(Collider other)
        {
            if (triggers.Contains(other))
                triggers.Remove(other);
        }

        /// <summary>
        /// Resets the player's position to the starting position.
        /// </summary>
        private void ResetPosition()
        {
            _moveData.velocity = Vector3.zero;
            _moveData.origin = _startPosition;
        }

        /// <summary>
        /// Clamps an angle between two values.
        /// </summary>
        public static float ClampAngle(float angle, float from, float to)
        {
            if (angle < 0f)
                angle = 360 + angle;
            if (angle > 180f)
                return Mathf.Max(angle, 360 + from);
            return Mathf.Min(angle, to);
        }

        #endregion
    }
}
